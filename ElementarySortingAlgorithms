/*
    *정렬은 컴퓨터 공학의 정수이다.

    What if sorting?

    sorting is the process of rearranging the items in a collection (e.g. an array)
    so that the items are in some kind of order.

http://panthema.net/2013/sound-of-sorting

sorting algorithms animations.

    objectives.
    buble.
    selection.
    insertion.

    javaScript has sort method.

    sort(string) -> a-z
    sort(integer) -> 10 - 0

    sort needs compare function.

    
*/

function numberCompare(num1, num2){
    return num1 - num2;
}
function numberCompareDESC(num1, num2){
    return num2 - num1;
}
console.log([6,4,15,10].sort()); //10,15,4,6
console.log([6,4,15,10].sort(numberCompare)); //4,6,10,15

//num1 -num2 가 음수를 반환하면 ,num1이 num2 앞에 온다.
// 양수를 반환하면 num2가 num1 앞에 온다.
//num2- num1을하면 양수반환 DESC
console.log([6,4,15,10].sort(numberCompareDESC)); //15, 10, 6, 4

//문자열 길이로도 가능하다. 

function compareByLen(str1, str2){
    return str1.length - str2.length;
}

["Steele", "Colt", "Data Structures", "Algorithms"].sort(compareByLen);
//['Colt', 'Steele', 'Algorithms', 'Data Structures']

//function needs two arguments. returns negative positive or 0.

//**********Buble sort. cf. visualgo.
//key. 반복을 할 때마다 정렬할 항목이 줄어든다.(last index => biggest)

//ES5 version.
function swap(arr, idx1, idx2){
    var temp = arr[idx1];
    arr[idx1] = arr[idx2];
    arr[idx2] = temp;
}

// ES2015
const swap2 = (arr, idx1, idx2) => {
    [arr[idx1],arr[idx2]] = [arr[idx2],arr[idx1]];
}


/* bublesort pseudocode.
    1. start looping from with a variable called i the end of the array towards the beginning
    2. start an inner loop with a variable called j from the beginning until i -1
    3. if arr[j] is greater than arr[j+1], swap those two values!
    4. return the sorted array.
*/
//naive -> last index + undefined. it doesn't need it.
// function bubleSort(arr){
//     for (let i = 0; i < arr.length; i++){
//       for(let j = 0; j < arr.length; j++ ){
//           console.log(arr, arr[j], arr[j+1]);
//           if (arr[j] > arr[j+1]){
//                 var temp = arr[j];
//                 arr[j] = arr[j+1];
//                 arr[j+1] = temp;
//             }          
//       }
//     }
//     return arr;
// }
// better;
// function bubleSort(arr){
//     for (let i = arr.length; i > 0; i--){
//         //each time 'i' goes minus, 'j'shurinks.
//         for(let j = 0; j < i-1; j++ ){
//             console.log(arr, arr[j], arr[j+1]);
//             if (arr[j] > arr[j+1]){
//                 var temp = arr[j];
//                 arr[j] = arr[j+1];
//                 arr[j+1] = temp;
//             }          
//         }
//         console.log("One pass complete!");
//     }
//     return arr;
// }
//ES2015
function bubbleSort(arr){
    const swap = (arr, idx1, idx2) => {
        [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];
    };
    for (let i = arr.length; i > 0; i--){
        for (let j = 0; j < i -1; j++){
            if (arr[j] > arr[j+1]){
                swap(arr, j, j+1);
            }
        }
    }
    return arr;
} 


//bubleSort([37,29,45,8]);
bubleSort([37,29,45,8,]);
