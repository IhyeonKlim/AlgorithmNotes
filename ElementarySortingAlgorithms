/*
    *정렬은 컴퓨터 공학의 정수이다.

    What if sorting?

    sorting is the process of rearranging the items in a collection (e.g. an array)
    so that the items are in some kind of order.

http://panthema.net/2013/sound-of-sorting

sorting algorithms animations.

    objectives.
    buble.
    selection.
    insertion.

    javaScript has sort method.

    sort(string) -> a-z
    sort(integer) -> 10 - 0

    sort needs compare function.

    
*/

function numberCompare(num1, num2){
    return num1 - num2;
}
function numberCompareDESC(num1, num2){
    return num2 - num1;
}
console.log([6,4,15,10].sort()); //10,15,4,6
console.log([6,4,15,10].sort(numberCompare)); //4,6,10,15

//num1 -num2 가 음수를 반환하면 ,num1이 num2 앞에 온다.
// 양수를 반환하면 num2가 num1 앞에 온다.
//num2- num1을하면 양수반환 DESC
console.log([6,4,15,10].sort(numberCompareDESC)); //15, 10, 6, 4

//문자열 길이로도 가능하다. 

function compareByLen(str1, str2){
    return str1.length - str2.length;
}

["Steele", "Colt", "Data Structures", "Algorithms"].sort(compareByLen);
//['Colt', 'Steele', 'Algorithms', 'Data Structures']

//function needs two arguments. returns negative positive or 0.

/* 
===============================
        Buble sort.
===============================
    cf. visualgo
    key. 반복을 할 때마다 정렬할 항목이 줄어든다.(last index => biggest)
*/
//ES5 version.
function swap(arr, idx1, idx2){
    var temp = arr[idx1];
    arr[idx1] = arr[idx2];
    arr[idx2] = temp;
}

// ES2015
const swap2 = (arr, idx1, idx2) => {
    [arr[idx1],arr[idx2]] = [arr[idx2],arr[idx1]];
}


/* bublesort pseudocode.
    1. start looping from with a variable called i the end of the array towards the beginning
    2. start an inner loop with a variable called j from the beginning until i -1
    3. if arr[j] is greater than arr[j+1], swap those two values!
    4. return the sorted array.
*/
//naive -> last index + undefined. it doesn't need it.
// function bubleSort(arr){
//     for (let i = 0; i < arr.length; i++){
//       for(let j = 0; j < arr.length; j++ ){
//           console.log(arr, arr[j], arr[j+1]);
//           if (arr[j] > arr[j+1]){
//                 var temp = arr[j];
//                 arr[j] = arr[j+1];
//                 arr[j+1] = temp;
//             }          
//       }
//     }
//     return arr;
// }
// better;
// function bubleSort(arr){
//     for (let i = arr.length; i > 0; i--){
//         //each time 'i' goes minus, 'j'shurinks.
//         for(let j = 0; j < i-1; j++ ){
//             console.log(arr, arr[j], arr[j+1]);
//             if (arr[j] > arr[j+1]){
//                 var temp = arr[j];
//                 arr[j] = arr[j+1];
//                 arr[j+1] = temp;
//             }          
//         }
//         console.log("One pass complete!");
//     }
//     return arr;
// }
//ES2015
// function bubbleSort(arr){
//     const swap = (arr, idx1, idx2) => {
//         [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];
//     };
//     for (let i = arr.length; i > 0; i--){
//         for (let j = 0; j < i -1; j++){
//             if (arr[j] > arr[j+1]){
//                 swap(arr, j, j+1);
//             }
//         }
//     }
//     return arr;
// }
//bubleSort([37,29,45,8]);


//최적화 optimaized by noSwaps.
function bubleSort(arr){
    var noSwaps;
    for (let i = arr.length; i > 0; i--){
        noSwaps = true;
        for(let j = 0; j < i-1; j++ ){
            console.log(arr, arr[j], arr[j+1]);
            if (arr[j] > arr[j+1]){
                var temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
                noSwaps = false;
            }          
        }
        if(noSwaps) break;
    }
    return arr;
}
//this idea from that what if no swaps, do we have to loop?

//bubleSort([37,29,45,8]);
bubleSort([8,1,2,3,4,5,6,7]);

// time complexity O(n^) cuz useing double loop.
// but if with noSwaps, like linear time.  O(n).


/* 
===============================
        Selection sort.
===============================
    similar to bubbleSort, but instead of first placing large values into sorted position,
    it places small values into sorted position.
    key. 최솟값을 선택하고 맨 앞으로 배치한다.

    pseudocode
    1. store the first element as the smallest value you've seen so far.
    2. complare this item to the next item in the array until you find a smaller number.
    3. if a smaller number is found, designate that smaller number to be the new "minimum" 
    and continue until the end of the array.
    4. if the "minimum" is not the value(index) you initially began with, swap the two values.
    5. repeat this with the next element until the array is sorted.

*/

//naive.
//cf. it's not a value. about index.
// function selectionSort(arr){
//     for (let i = 0; i < arr.length; i++){
//         var minimum = i;
//         // wrong! -> mine var minimum = arr[i];
//         for (let j = i+1; j < arr.length; j++){
//             //read. arr[j] is lower than lowest.
//             if(arr[j] < arr[minimum]){
//                 minimum = j;
//             }
//         }
//         //  wrong! -> mine arr[i] = minimum;
//         console.log(i, minimum); 
//         var temp = arr[i];
//         arr[i]  = arr[minimum];
//         arr[minimum] = temp;
//     }
//     return arr;
// }
function selectionSort(arr){
    const swap = (arr, idx1, idx2) =>{
        [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];
    }
    for (let i = 0; i < arr.length; i++){
        let lowest = i;
        for( let j = i + 1; j < arr.length; j++){
            if ( arr[lowest] > arr[j]){
                lowest = j;
            }
        }
        if ( i !== lowest) swap(arr, i, lowest);       
    }
    return arr;
}

selectionSort([0,2,34,22,10, 19, 17]);

//timeconplexity O(n^)


/*
===============================
        insertion sort.
===============================
    similar to bubbleSort, but instead of first placing large values into sorted position,
    it places small values into sorted position.
    key. 최솟값을 선택하고 맨 앞으로 배치한다.

    pseudocode
    1. start by picking the second element in the array.
    2. now compare the second element with the one before it and swap if necessary.
    3. continue to the next element and if it is in the incorrect order, 
    iterate through the sorted portion (i.e. the left side) to place the element in the correct place.
    4. repeat until the array is sorted.

    key. pick a value and moving forward.
    
*/

function insertionSort(arr){
    for(var i = 1; i < arr.length; i++){
        var currentVal = arr[i];
        //because of e.g. currentVal has to be smaller then arr[j]. add condition.
        for(var j = i-1; j >= 0 && arr[j] > currentVal; j--){
            arr[j+1] = arr[j]
        }
        //we need j+1. remember you put a value(i.e. arr[j]) to arr[j+1] position. 
        arr[j+1] = currentVal;
        console.log(arr);
    }
    return arr;
}
insertionSort([2,1,9,76,4]);

/*
    what is insertion? ez to understand.
    [1,2,9,76,0] in this case what we do?
    (e.g.) pick 0. so we have to move 0.
    0 is in currentVal. so we move 76 to 0's index.
    now [1,2,9,76,76]
    compare with 9 still bigger than currentVal(i.e. 0)
    so we move 9 to 76's index.
    now [1,2,9,9,76]
    compare with 2 still bigger than currentVal(i.e. 0)
    so we move 2 to 9's index.
    now [1,2,2,9,76]
    compare with 1 still bigger than currentVal(i.e. 0)
    so we move 1 to 2's index.
    now [1,1,2,9,76]
    it's end of array.(index 0.)
    so we put currentVal to index 0.
    now [0,1,2,9,76]

    timeconplexity = o(n^) but. if is almost sorted... 
    bestCase [1,2,3,4,-1].
    worstCase [4,3,2,1]

*/

/*
    So, Big o of sorting. compare complexity.
                best , average, worst, space.
        buble   o(n), o(n^), o(n^), o(1)
    insertion   o(n), o(n^), o(n^), o(1)
    selection   o(n^), o(n^), o(n^), o(1)

    이 3가지를 한 데 묶는 이유는 이것이 2차 정렬 알고리즘이기 때문이다.
    cf. space complexity : this algorithms are not make new arr or make new values.
    insertion sort is the specialized to keep ordering new data set.(i.e. adding new items.)

    these algorithms are good at small data set.
*/

/*
====================
    Quick Sort.
====================

1. like merge sort, exploits the fact that arrays of 0 or 1 element are always sorted.
cf.) exploits : to use something in a way that helps you. || unfailry use for own adventage.

2. works by selecting one element(called the "pivot") and finding the index where the pivot should end up in the sorted array.

3. Once the pivot is positioned appropriately, quick sort can be a[[;oed on eigher side of the pivot.

who does it work?

[5,2,1,8,4,7,6,3]

pick a number. like 5.

and bigger right side, left left side. and put a picked number
         
3,2,1,4, '5' 7,6,8

doing it recursively. left side and right side.

pick a number 3.

2,1, '3' ,4

pick a number 1.

'1' 2 '3', 4

now sorted and end up with edge of array.

like this pickture.

            5
        3       7, 6, 8
    1      4
       2

and going to right side.

pick 7

6 to the left, 8 to right. 

             5
        3         7
    1      4   6     8
       2
       
    ============
    Pivot helper. (quick sort needs pivot.)
    ============

1. in order to implement merge sort, it's useful to first implement a function responsible arranging elements in an array on eigher side of a pivot.
2. given an array, this helper function should designate an element as the pivot
3. it should then rearrange elements in the array so that all values less than the pivot are moved to the left of the pivot, and all values greater than the pivot are moved to the right of the pivot.
4. the order of elements on eigher side of the pivot doesn't matther.
5. the helper should do this in place, that is, it should not create a new array
6. whe complete, the helper should return the index of the pivot.

* picking a pivot.
1. the runtime of quick sort depends in part on how one selects the pivot.
2. ideally, the pivot should be shosen so that it's roughly the median value in the data set you're sorting.
3. for simplicity, we'll always choose the pivot to be the first element(we'll talk about sonsequences of this later.)




//pivot helper example

let arr = [ 5, 2, 1, 8, 4, 7, 6, 3]

pivot(arr); //4; it doesn't return array. but index.

arr;
// any one of these is an acceptable mutation:
// [2, 1, 4, 3, 5, 8, 7, 6]
// [1, 4, 3, 2, 5, 7, 6, 8]
// [3, 2, 1, 4, 5, 7, 6, 8]
// [4, 1, 2, 3, 5, 6, 8, 7]
// there are other acceptalble mutations too.

// it doen't matter in the code what is actually in left side.
// -> 코드의 왼쪽에는 실제로 무엇이(어떤 순서로) 있는지 중요하지 않다. (어차피 재귀)


*** pivot pseudocode

1. it will help to accept three arguments: an array, a start index, and an end index(these can default to 0 and the array length minus 1, respectively)
2. grab the pivot from the start of the array.
3. store the current pivot index in a variable  (this will keep track of where the pivot should end up)
4. loop through the array from the start until the end
    if the pivot is greater than the current element, increment the pivot index variable and then swap the current element with the element at the pivot index.
5. swap the starting element(i.e. the pivot) with the pivot index.    
6. return the pivot index.

작으면 피벗인덱스를 정하고 작은게 생길때마다 피벗인덱스를 증가한다. 
마지막에 피벗인덱스와 픽한 녀석을 바꿔준다. 그러면 알 수 있는 것은 이 위치가 처음 픽한 숫자의 정확한 인덱스라는 것이다.
*/

function pivot(arr, start = 0, end = arr.length + 1){
    var pivot = arr[start];
    var swapIdx = start;

    function swap(array, i, j){
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    
    for (var i = start + 1; i < arr.length; i++){
        if (pivot > arr[i]){
            swapIdx++;
            swap(arr,swapIdx,i)
//            console.log(arr);
        }
    }
    //cf. start = index of pivot. pivot = value of pivot.
    swap(arr,start,swapIdx);
    return swapIdx
}
pivot([4,8,2,1,5,7,6,3]);
//pivot([4,8,2,1,5,7,6,3])
// pick no(pivot)= 4, swapIdx = 0, i = 1
// for pivot,swapIdx => if 2.
// swapInx = 1, swap(8,2)
//pivot([4,2,8,1,5,7,6,3])
// => if 1.
// swapInx = 2, swap(8,1)
//pivot([4,2,1,8,5,7,6,3])
// => if 3
// swapInx = 3, swap(8,3)
//pivot([4,2,1,3,5,7,6,8])
//now endup the array.
// so swap pivot with swapIdx.
//swapInx = 3, swap(4,3)
//pivot([3,2,1,4,5,7,6,8]) 4 is in correct index.


/*
//ES5 version.
function pivot(arr, start = 0, end = arr.length -1){
    const swap = (arr, idx1, idx2) =>{
        [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];
    };
    // We are assuming the pivot is always the first element
    let pivot = arr[start];
    let swapIdx = start;

    for(let i = start +1; i <= end; i++){
        if(pivot > arr[i]){
            swapIdx++;
            swap(arr, swapIdx, i);
        }
    }
    // Swap the pivot from the start the swapPoint
    swap(arr, start, swapIdx);
    return swapIdx;
}
*/

/*
    QuickSort pseudocode
    1. call the pivot helper on the array.
    2. when the helper returns to you the updated pivot index, resursively call the pivot helper on the subarray to the left of that index and the subarray to the right of that index.
    * it happens in same array. not making in a new array.
    3. your base case occurs when you consider a subarray with less than 2 elements
cf. quickSort([4,6,9,1,2,5,3]);
        [4,6,9,1,2,5,3]
        [3,2,1,4,6,9,5]
                 4
        3 , 2 , 1  6, 9, 5
               3     6
            2,1      5, 9
              2
            19
    pivot을 뺀 나머지만 퀵 정렬을 돌린다. pivot은 제자리니까.
*/

function quickSort(arr, left = 0, right = arr.length-1){
    if(left < right){
        let pivotIndex = pivot(arr,left, right); //3
        //left
        quickSort(arr,left, pivotIndex-1);
        //right
        quickSort(arr,pivotIndex+1,right);        
    }
    return arr;
    
}
quickSort([4,6,9,1,2,5,3]);
