/*
Objectives.

define what a singly linked list is.

compare and contrast linked lists with arrays.

implement insertion, removal and traversal methods on singly lined lists.


what is a linked list?

array. index.

no index.

each elements are nod.

head. begin
tail. end

**singly linked lists.
               total length = 4
   head                            tail 
    4    ->    6   ->    8   ->    2  -> 
        next      next      next      null

단일방향으로 연결되어있다.

array ='엘리베이터 있는 고층건물' = 바로 간다.
linked list = "엘베 없음." = 하나하나 걸어올라가야한다.

lists
    do not have indexes.
    connected via nodes with a next pointer
    random access is not allowed
    it have to has 'head'
    -> best of insertion and deletion
    
arrays
    indexed in order
    insertion and deletion can be expensive
    can quickly be accessed at a specific index.

cf. visualgo.

*/

// piece of data - val
//reference to next node - next

class Node{
    constructor(val){
        this.val = val;
        this.next = null;
    }
}


// var first = new Node("Hi")
// first.next = new Node("there")
// first.next.next = new Node("how")
// first.next.next.next = new Node("are")
// first.next.next.next.next = new Node("you")

/*
   PUSHING PSEUDOCODE

   This function should accept a value
   create a new node using the value passed to the function
   if there is no head property on the list, set the head and tail to be the newly created node
   otherwise set the next property on the tail to be the new node and set the tail property on the list to be the newly created node.
   increment the length by one.
   return the linked list
*/





class SinglyLinkedList{
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    push(val){
       let newNode = new Node(val);
       if (!this.head){
          this.head = newNode;
          this.tail = this.head;
       }else{
          this.tail.next = newNode;
          this.tail = newNode;
       }
       this.length ++;
       return this;

    }
   // traverse(){
   //    var current = this.head;
   //    while(current){
   //       console.log(current.val);
   //       current = current.next;
   //    }
   // }
}


// first.next.next.next = new Node("are")
// first.next.next.next.next = new Node("you")

var list = new SinglyLinkedList()
list.push("HELLO")
list.push("HAY YOU")
list.push("GOODBYE")


list.head //Hi
list.head.next //hay you
list.head.next.next //GOODBYE


/*
   popping

   removing a node from the end of the linked list.
   
   PSEUDOCODE

   if there are no nodes in the list, return undefined
   loop through the list until you reach the tail
   set the next property of the 2nd to last node to be null

   
*/
