/*
Objectives.

define what a singly linked list is.

compare and contrast linked lists with arrays.

implement insertion, removal and traversal methods on singly lined lists.


what is a linked list?

array. index.

no index.

each elements are nod.

head. begin
tail. end

**singly linked lists.
               total length = 4
   head                            tail 
    4    ->    6   ->    8   ->    2  -> 
        next      next      next      null

단일방향으로 연결되어있다.

array ='엘리베이터 있는 고층건물' = 바로 간다.
linked list = "엘베 없음." = 하나하나 걸어올라가야한다.

lists
    do not have indexes.
    connected via nodes with a next pointer
    random access is not allowed
    it have to has 'head'
    -> best of insertion and deletion
    
arrays
    indexed in order
    insertion and deletion can be expensive
    can quickly be accessed at a specific index.

cf. visualgo.

*/

// piece of data - val
//reference to next node - next

class Node{
    constructor(val){
        this.val = val;
        this.next = null;
    }
}


// var first = new Node("Hi")
// first.next = new Node("there")
// first.next.next = new Node("how")
// first.next.next.next = new Node("are")
// first.next.next.next.next = new Node("you")

/*
   PUSHING PSEUDOCODE

   This function should accept a value
   create a new node using the value passed to the function
   if there is no head property on the list, set the head and tail to be the newly created node
   otherwise set the next property on the tail to be the new node and set the tail property on the list to be the newly created node.
   increment the length by one.
   return the linked list
*/





class SinglyLinkedList{
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    push(val){
       let newNode = new Node(val);
       if (!this.head){
          this.head = newNode;
          this.tail = this.head;
       }else{
          this.tail.next = newNode;
          this.tail = newNode;
       }
       this.length ++;
       return this;

    }
   pop(){
      if(!this.head) return undefined;
      var current = this.head;
      var newTail = current;
      while(current.next){
         newTail = current;
         current = current.next;
      }
      console.log(current.val);
      console.log(newTail.val);
      this.tail = newTail;
      this.tail.next = null;
      this.length--;
      //if one item left -> tail. and head? this is speacial case.
      if (this.length == 0){
         this.head = null;
         this.tail = null;
      }
      
      return current;
      

      
   }
   // traverse(){
   //    var current = this.head;
   //    while(current){
   //       console.log(current.val);
   //       current = current.next;
   //    }
   // }
   shift(){
      if(!this.head) return undefined;
      var currentHead = this.head;
      this.head = currentHead.next;
      this.length--;
      if (this.length == 0){
         this.tail = null;
      }
      return currentHead;
   }

   unshift(val){
      var newNode = new Node(val);
      if(!this.head){
         this.head = newNode;
         this.tail = this.head;
      }else{
         newNode.next = this.head;
         this.head = newNode;
      }
      this.length++;
      return this;
   }
   get(index){
      if(index < 0 || index >= this.legnth) return null;
      var counter = 0;
      var current = this.head;
      while(counter !== index){
         current = current.next;
         counter++;
      }return current;
   }
   set(index, val){
      var foundNode = this.get(index);
      if(foundNode){
         foundNode.val = val;
         return true;
      }
      return false;
   }
   insert(index, val){
      if(index < 0 || index > this.length) return false;
      if(index === this.length) return !!this.push(val);
      if(index === 0) return !!this.unshift(val);
      //cf. !"hi" -> false , !!"hi" -> true. !연산자는 boolean을 강제한다.

      var newNode = new Node(val);
      var previous = this.get(index -1);
      var temp = previous.next;
      prev.next = newNode;
      newNode.next = temp;
      this.length++;
      return true;
   }
   
   
}


// first.next.next.next = new Node("are")
// first.next.next.next.next = new Node("you")

var list = new SinglyLinkedList()
list.push("HELLO")
list.push("HAY YOU")
list.push("GOODBYE")


list.head //Hi
list.head.next //hay you
list.head.next.next //GOODBYE


/*
   popping

   removing a node from the end of the linked list.
   
   PSEUDOCODE

   if there are no nodes in the list, return undefined
   loop through the list until you reach the tail
   set the next property of the 2nd to last node to be null

   shifting pseudocode

   if there are no nodes, return undefined
   store the current head property in a variable
   set the head property to be the current head's next property
   decrement the length by 1
   return the value of the node removed.

   unshifting pseudocode

   this function should accept a value
   create a new node using the value passed to the function 
   if there is no head property on the list, set the head and tail to be the newly created node
   otherwise set the newly created node's next property to be the current head property on the list.
   set the head property on the list to be that newly created node
   increment the length of the list by 1
   return the linked list


   get pseudocode

   this function should accept an index
   if the index is less than zero or greater than or equal to the length of the list, return null
   loop through the list until you reach the index and return the node at that specific index.
   
   set pseudocode

   this function should accept a value and an index
   user your get function to find the specific node.
   if the node is not found, return false
   if the node is found, set the value of that node to be the value passed to the function and return true

   insert pseudocode
   
   if the index is less than zero or greater than the length, return false;
   if the index is the saem as the length, push a new node to the end of the list.
   if the index is 0, unshift a new node to the start of the list.
   Otherwise, using the get methods, access the node at the index -1
   Set the next property on that node to be the new node
   Set the next property on the new node to be the previous next
   increment the length
   return true.
   
   
*/
