/*
====================
    Quick Sort.
====================

1. like merge sort, exploits the fact that arrays of 0 or 1 element are always sorted.
cf.) exploits : to use something in a way that helps you. || unfailry use for own adventage.

2. works by selecting one element(called the "pivot") and finding the index where the pivot should end up in the sorted array.

3. Once the pivot is positioned appropriately, quick sort can be a[[;oed on eigher side of the pivot.

who does it work?

[5,2,1,8,4,7,6,3]

pick a number. like 5.

and bigger right side, left left side. and put a picked number
         
3,2,1,4, '5' 7,6,8

doing it recursively. left side and right side.

pick a number 3.

2,1, '3' ,4

pick a number 1.

'1' 2 '3', 4

now sorted and end up with edge of array.

like this pickture.

            5
        3       7, 6, 8
    1      4
       2

and going to right side.

pick 7

6 to the left, 8 to right. 

             5
        3         7
    1      4   6     8
       2
       
    ============
    Pivot helper. (quick sort needs pivot.)
    ============

1. in order to implement merge sort, it's useful to first implement a function responsible arranging elements in an array on eigher side of a pivot.
2. given an array, this helper function should designate an element as the pivot
3. it should then rearrange elements in the array so that all values less than the pivot are moved to the left of the pivot, and all values greater than the pivot are moved to the right of the pivot.
4. the order of elements on eigher side of the pivot doesn't matther.
5. the helper should do this in place, that is, it should not create a new array
6. whe complete, the helper should return the index of the pivot.

* picking a pivot.
1. the runtime of quick sort depends in part on how one selects the pivot.
2. ideally, the pivot should be shosen so that it's roughly the median value in the data set you're sorting.
3. for simplicity, we'll always choose the pivot to be the first element(we'll talk about sonsequences of this later.)




//pivot helper example

let arr = [ 5, 2, 1, 8, 4, 7, 6, 3]

pivot(arr); //4; it doesn't return array. but index.

arr;
// any one of these is an acceptable mutation:
// [2, 1, 4, 3, 5, 8, 7, 6]
// [1, 4, 3, 2, 5, 7, 6, 8]
// [3, 2, 1, 4, 5, 7, 6, 8]
// [4, 1, 2, 3, 5, 6, 8, 7]
// there are other acceptalble mutations too.

// it doen't matter in the code what is actually in left side.
// -> 코드의 왼쪽에는 실제로 무엇이(어떤 순서로) 있는지 중요하지 않다. (어차피 재귀)


*** pivot pseudocode

1. it will help to accept three arguments: an array, a start index, and an end index(these can default to 0 and the array length minus 1, respectively)
2. grab the pivot from the start of the array.
3. store the current pivot index in a variable  (this will keep track of where the pivot should end up)
4. loop through the array from the start until the end
    if the pivot is greater than the current element, increment the pivot index variable and then swap the current element with the element at the pivot index.
5. swap the starting element(i.e. the pivot) with the pivot index.    
6. return the pivot index.

작으면 피벗인덱스를 정하고 작은게 생길때마다 피벗인덱스를 증가한다. 
마지막에 피벗인덱스와 픽한 녀석을 바꿔준다. 그러면 알 수 있는 것은 이 위치가 처음 픽한 숫자의 정확한 인덱스라는 것이다.
*/

function pivot(arr, start = 0, end = arr.length + 1){
    var pivot = arr[start];
    var swapIdx = start;

    function swap(array, i, j){
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    
    for (var i = start + 1; i < arr.length; i++){
        if (pivot > arr[i]){
            swapIdx++;
            swap(arr,swapIdx,i)
//            console.log(arr);
        }
    }
    //cf. start = index of pivot. pivot = value of pivot.
    swap(arr,start,swapIdx);
    return swapIdx
}
pivot([4,8,2,1,5,7,6,3]);
//pivot([4,8,2,1,5,7,6,3])
// pick no(pivot)= 4, swapIdx = 0, i = 1
// for pivot,swapIdx => if 2.
// swapInx = 1, swap(8,2)
//pivot([4,2,8,1,5,7,6,3])
// => if 1.
// swapInx = 2, swap(8,1)
//pivot([4,2,1,8,5,7,6,3])
// => if 3
// swapInx = 3, swap(8,3)
//pivot([4,2,1,3,5,7,6,8])
//now endup the array.
// so swap pivot with swapIdx.
//swapInx = 3, swap(4,3)
//pivot([3,2,1,4,5,7,6,8]) 4 is in correct index.


/*
//ES5 version.
function pivot(arr, start = 0, end = arr.length -1){
    const swap = (arr, idx1, idx2) =>{
        [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];
    };
    // We are assuming the pivot is always the first element
    let pivot = arr[start];
    let swapIdx = start;

    for(let i = start +1; i <= end; i++){
        if(pivot > arr[i]){
            swapIdx++;
            swap(arr, swapIdx, i);
        }
    }
    // Swap the pivot from the start the swapPoint
    swap(arr, start, swapIdx);
    return swapIdx;
}
*/

/*
    QuickSort pseudocode
    1. call the pivot helper on the array.
    2. when the helper returns to you the updated pivot index, resursively call the pivot helper on the subarray to the left of that index and the subarray to the right of that index.
    * it happens in same array. not making in a new array.
    3. your base case occurs when you consider a subarray with less than 2 elements
cf. quickSort([4,6,9,1,2,5,3]);
        [4,6,9,1,2,5,3]
        [3,2,1,4,6,9,5]
                 4
        3 , 2 , 1  6, 9, 5
               3     6
            2,1      5, 9
              2
            19
    pivot을 뺀 나머지만 퀵 정렬을 돌린다. pivot은 제자리니까.
*/

function quickSort(arr, left = 0, right = arr.length-1){
    if(left < right){
        let pivotIndex = pivot(arr,left, right); //3
        //left
        quickSort(arr,left, pivotIndex-1);
        //right
        quickSort(arr,pivotIndex+1,right);        
    }
    return arr;
    
}
quickSort([4,6,9,1,2,5,3]);
