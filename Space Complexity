//공간 복잡도
//before time complexity. >> Big O (n)

//technically is equal as auxiliary space complexity

//forcusing in inside of algorythm.

//constance space.


function sum(arr){
    let total = 0;
    //one number. total
    //two number. let i
    for( let i = 0; i < arr.length; i++){
        total += arr[i];
    }
    return total;
}
//변수는 총 2개다. 인풋값이 뭐가 되든.


function double (arr){
    let newArr = [];
    //입력에 길어지는 배열.
    for( let i = 0; i < arr.length; i++){
        newArr.push(2 * arr[i]);
        //10공간이 입력된 배열의 크기와 비례하여 증가한다.
    }
    return newArr;
}
// O(n) space.
double([1,2,3]);

/*

아래 함수에 대한 공간 복잡도를 구하세요.

function logUpTo(n) {
    for (var i = 1; i <= n; i++) {
        console.log(i);
    }
} O(1)


function logAtMost10(n) {
    for (var i = 1; i <= Math.min(n, 10); i++) {
        console.log(i);
    }
} O(1)


function onlyElementsAtEvenIndex(array) {
    var newArray = Array(Math.ceil(array.length / 2));
    for (var i = 0; i < array.length; i++) {
        if (i % 2 === 0) {
            newArray[i / 2] = array[i];
        }
    }
    return newArray;
} ->> O(n)

function subtotals(array) {
    var subtotalArray = Array(array.length);
    for (var i = 0; i < array.length; i++) {
        var subtotal = 0;
        for (var j = 0; j <= i; j++) {
            subtotal += array[j];
        }
        subtotalArray[i] = subtotal;
    }
    return subtotalArray;
} ->> O(n)

*/
