/*
    Binary Search Pseudocode.

    This function accepts a sorted array and a value.
    create a left pointer at the start of the array
    , and a right pointer at the end of the array.

    while the left pointer comes before the right pointer:
        create a pointer in the middle
        if you find the value you want, return the index
        if the value is too small, move the left pointer.
        if the value is too large, move the right pointer down.
    if you never find the value, return -1
    
    


*/

function binarySearch(arr, elem){
    var start = 0;
    var end = arr.length -1;
    var middle = Math.floor((start + end) /2);
//    console.log(start, middle, end);

    // the way to stop this loop is finding answer.
    // what if there isn't? so start <= end.
    while(arr[middle] !== elem && start <= end){
//        console.log(start, middle, end);
        if(elem < arr[middle]){
            end = middle -1;
        }else{
            start = middle +1;
        }
        middle = Math.floor((start + end) /2);
    }
    return arr[middle] === elem ? middle : -1;
    // if(arr[middle] === eleme){
    //     return middle;
    // }
    // return -1;
}

binarySearch([2,5,6,9,13,15,28,30],28);
//[2, 5, 6, 9, 13, 15, 28, 30]
// S        M               E

//[2, 5, 6, 9, 13, 15, 28, 30]
//if elem > arr[middle] case start = middle +1;
//              S           E
// start is moved. so need to calculate middle again.

//[2, 5, 6, 9, 13, 15, 28, 30]
//                      SM   E
binarySearch([2,5,6,9,13,15,28,30],50);

//[2, 5, 6, 9, 13, 15, 28, 30]
//                         SME
