/*
    this pattern involves creating a window which can either
    be an array or number from one position to another.

    depending on a certain condition, 
    the window either increases or closes(and a new window is created)

    very useful for keeping track of a subset of data in an array/string etc.
    
*/

/*
    An Example

    write a function called maxSubarrySum which accepts
    an array of integers and a number called n. The function
    should calculate the maximum sum of n 
    consecutive elements in the array.
    
        maxSubarraySum([1,2,5,2,8,1,5],2) //10
        maxSubarraySum([1,2,5,2,8,1,5],4) //17
        maxSubarraySum([4,2,1,6],1) //6
        maxSubarraySum([4,2,1,6,2],4) //13
        maxSubarraySum([],4) //null

*/


//a naive solution

// function maxSubarraySum(arr, num){
//     if (num > arr.legnth){
//         return null;
//     }
//     var max = -Infinity;
//     for (let i = 0; i < arr.legnth - num + 1; i++){
//         temp = 0;
//         for( let j = 0; j < num; j++){
//             temp += arr[i + j];
//         }
//         if (temp > max){
//             max = temp;
//         }
//         console.log(temp, max);
//     }
//     return max;
// }
//time complexity - O(N^2)

//refactor
function maxSubarraySum(arr,num){
    let maxSum = 0;
    let tempSum = 0;
    if(arr.legnth < num) return null;
    for ( let i = 0; i < num; i++){
        maxSum += arr[i]
    }
    tempSum = maxSum;
    for( let i = num; i < arr.length; i++){
        tempSum = tempSum - arr[i -num] + arr[i];
        maxSum = Math.max(maxSum, tempSum);
    }
    return maxSum;
}
//time complexity - O(N);

maxSubarraySum([1,2,5,2,8,1,5],2) //10
maxSubarraySum([1,2,5,2,8,1,5],4) //17
maxSubarraySum([4,2,1,6],1) //6
maxSubarraySum([4,2,1,6,2],4) //13
maxSubarraySum([],4) //null
