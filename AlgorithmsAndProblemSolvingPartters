//AlgorithmsAndProblemSolvingPartters

/*
Objectives.
define what an Algorithm is.
Devise a plan to solve Algorithm
Compare and contrast problem solving patterns including frequency counters,
two pointer problems and dvide and conquer.

알고리즘은 특정 작업을 달성하기 위한 과정이나 일련의 단계를 의미한다.

how do you improve?

1. devise a plan for solving problems.
    - 문제를 세분화 하는 전략
2. master common problem solving patterns
    - 일반적인 문제 해결 패턴 파악

problem solving

*unserstand the problem
**explore concreate examples
***break it down
****solve/simplify
*****look back and refactor



what is understand the problem?
1. Can I restate the problem in my own words?
2. what are the inputs that go into the problem?
3. what are the outputs that should come from the solution to the problem?
4. can the outputs be determined from the inputs? 
-> do i have enough information to solve the problem?
5. How should I label the important pieces of date that are a part of the problem?

following this guide.
===================================================================
Q. Write a function which takes two numbers and returns their sum.
===================================================================
1. Can I restate the problem in my own words?
-> "addtion of two inputs."
2. What are the inputs that go into the problem?
-> is it int?, floats? how large enough?
3. What are the outputs that should come from the solution to the problem?
-> is it int?, floats? string?
4. Cant the outputs be determined from the inputs?
-> if put it one. or many. what do i return?
5. How should I label it?
-> addtion function. for something.

example
========================================================
Write a function which takes in a string and returns counts of each character in the string.
========================================================
*/

//1. understand the problem.
//charCount("aaaa"); //{a:4}
//charCount("hello"); //{h:1, e:1, l:2, o:1}

//전달받은 문자만 반환해야하는가? 아니면 다른 녀석들도 해야 하는가? b:0? 이런식으로.
//이미 0으로 지정되어 있다면 그냥 +만 시키면 되는거 아닌가? 같은 생각이 필요하다.

//"my phone number is 1234"
//공백은 어찌 처리할껀데? 숫자는 어찌할껀데?
//"Hello hi"
//대문자와 소문자를 모두 저장했을 때 시작의 대문자는 무시해야 할까?

//문제해결하기 이전에 이러한 질문들을 던지는 것이 문제를 더 이해하는 다른 방식을 도입하게 되고 문제점을 해결할 수 있다. 

//charCount() //아무것도 넣지 않으면?
//charCount(null) //잘못된 값을 넣으면?

//확신이 들지 않는 것을 세분화를 통해 발견해 나가는 것.

//2.explore concreate examples.
//skip. this part.

//3.break it down.
//charCount("your PIN number is 1234!")
/* skeleton in this right this.
    1:1,
    2:1,
    3:1,
    4:1,
    b:1,
    e:1,
    i:1,
    m:1,
    n:1,
    o:1,
    p:1,
    r:2,
    s:1,
    u:2,
    y:1
*/

function charCount(str){
    //to-do.
    /*
        by looking at backbone, first of all "Lower tha All Cases."

        make object to return at end.
        loop over string, for each charcater.
        if the char is a number/letter And a key in object, add one to count.
        if the char is a number/letter And not in object, and it and set value to 1
        if character is something else (space, period, etc.) don't do anything.
    */

    /*
    문제에 접근해서 분석하고 해결해 나가는 과정을 묘사해야한다. 주석으로라도. 
    설령 틀린 답이나오거나 답을 찾지 못했다고 하더라도
    문제를 해결해 나가는 과정이 중요하기 때문이다.
    */

//4.solve/simplify.
    /*  1. 시간이 많이 소요되는 부분을 무시하라. 하다 막히지 말고
        코드를 작성하다가 다시 합칠 것이라는 것을 염두에 두고 가능한 작업들을
        수행하기 위해 코드를 작성하는 편이 훨씬 낫다.
        2. 보통 문제를 단순화 하는 과정에서 실제 해결책을 깊이 이해하고 
        문제의 어려운 부분을 파악하면서 점차 이해하기 시작한다.

    */
    //make object to return at end.
    var result = {};

    //loop over string, for each charcater.
    for(var i = 0; i < str.length; i++){
        var char = str[i].toLowerCase();
        if(result[char] > 0){
            result[char]++;
        }else{
            result[char] = 1;
        }
    }
        
    //return object at end
    return result;
}
charCount("hello");

//{h: 1, e: 1, l: 2, o: 1};

//여기서 대문자들은 lowercase()를 통해 처리했다.
//그럼 그 이후에 숫자나 다른 문자열은 어떻게 할 것인가? -> 유효한 문자인지를 검사해야한다.
//긴 배열을 만들어서 혹은 아스키코드를 통해서 혹은 정규식을 통해서 걸러내야 한다.
//이 방법들을 생각해내고 또 알고 있어야 한다.


//look back & refactoring.

//can you derive the result differently? //다른 접근방법, 다른 해결방법
//can you understand it at a glance? //직관적인가?
//cna you use the result or method for some other problem? //다른 문제를 해결할 수 있는가?
//can you improve the performance of your solution? //성능을 더 올릴 수 있는가? 시간,공간복잡도
//can you think of other ways to refactor? //향상할 수 있는가? 언어규칙이나 방침, 규정에 따라서.
//how have other people solved this problem? // 다른 사람들은 어떻게 해결했는가? 다른 접근법.

/*
function charCountRefac(str){
    var obj = {};
    for(var i = 0; i <str.length; i++){
        var char = str[i].toLowerCase();
        if(/[a-z0-9]/.test(char)){
            if (obj[char] > 0){
                obj[char]++;
            } else {
                obj[char] = 1;
            };
        }
    }
    return obj;
    
}
*/

function charCountRefac(str){
    let obj = {};
    for(let char of str){
        //char = char.toLowerCase();
        //검사하고 lowe가 효율적이냐, 아니면 검사하고가 효율적이냐.
        if(/[a-z0-9]/.test(char)){
            char = char.loLowerCase();
            //검사하고가 효율적이다.
            // if (obj[char] > 0){
            //     obj[char]++;
            // } else {
            //     obj[char] = 1;
            // };
            //스트레스 받는 상황이면 간단하게 작성 후 다음으로 넘어가자.
            //if (isAlphaNumeric(char))
            obj[char] = ++obj[char] || 1;
            
        }
    }
    return obj;
}

//cf. numeric
function isAlphaNumeric(str){
    var code;

    for(var i = 0; len = str.length; i++){
        code = str.charCodeAt(i);
        if(!(code > 47 && code < 58) && //numeric(0-9)
           !(code > 64 && code < 91) && //upper aplpha (A-Z)
           !(code > 96 && code < 123) ){ //lower aplha(a-z)
            return false;
        }
    }
    return true;
}
text = 1
isAlphaNumeric(text);

/*
//정규식
function isAlphaNumeric(str){
    return /^[a-zA-Z0-9]$/.test(str);
}
isAlphaNumeric(text);
*/
//정규식이 55% 느리다.
