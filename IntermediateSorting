/*
    Objectives.
    understand the limitations of the sorting algorithms we've learnd so far.

    implement merge sort
    implement quick sort
    implement radix sort
    *radix = 지수

    faster sorts can improve time complexity from O(n^) to O(n logN)
    there's a tradeoff between efficiency and simplicity.
    more efficient algorithms are much less simple.


=====================================
            Merge Sort.
=====================================
merging and sorting. 
분할 + 정렬 + 합병 세가지가 일어난다.
분할 정복 알고리즘이다.

e.g.
*정렬된 배열 두 개를 합치는 건 정렬되지 않은 배열을 합치는 것보다 쉽다.
                [8,3,5,4,7,8,1,2]
        [8,3,5,4]                [7,6,1,2]
    [8,3]    [5,4]            [7,6]    [1,2]
   [8]  [3] [5]  [4]        [7]  [6]  [1]  [2]
    [3,8]     [4,5]           [6,7]     [1,2]
        [3,4,5,8]                 [1,2,6,7]
                [1,2,3,4,5,6,7,8]

about merge sort.
    1. in order to implement merge sort, 
        it's useful to first implement 
        a function resposible for merging 
        two sorted arrays.
    2. given two arrays which are sorted, 
        this helper function should create 
        a new array which is also sorted, 
        and consist of all of the elements 
        in the two input arrays.
    3. this function should run in O(n+m) time and O(n+m) space and
        should not modify the parameters passed to it.
        *cf. n = length of first array. m = length of second array.

    *PseudoCode
    1. create an empty array, take a look at the smallest values in each input array.
    2. while there are still values we haven't looked at.
        - if the value in the first array is smaller than the value in the second array, 
        push the value in the first array into our results and move on to the next value in the first array
        - if the value in the first array is larger than the value in the second array, 
        push the value in the second array into our result and move on to the next value in the second array
        - once we exhaust one array, push in all remaining values from the other array.
        
        
    * in this case thease two array always sorted by same way. ASC or DESC.    

    merge([1,10,50],[2,14,99,100]);
    [1,10,50]    [2,14,99,100]
    >1 compare 2 
    put it smaller one. [1]

    pointer moves to first array. (10)

    10 compare 2
    put it smaller one. [1,2]

    pointer moves to second array (14)

    ... to until end of one array.
        */




function merge(arr1,arr2){
    
}


merge([1,10,50],[2,14,99,100]);
