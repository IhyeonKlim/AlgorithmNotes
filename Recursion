/*
    Objectives

    define what recursion is and how it can be used
    understand the two essential components of a recursive function
    visualize the call stack to better debug and understand recursive functions

    use helper method recursion and pure recursion to solve more difficult problems.

    story. dragon and mark. what's the first number.

    definition of recursion. 
    A process that calls itself.

    JSON.parse/ JSON.stringify. upto js engine.
    document.getElementById and DOM traversal algorithms.
    cf. Dom은 요소가 중첩된 트리구조를 가지고 있다.
    Object traversal.
    sometimes a cleaner alternative to iteration.

    why we need recursion?
    function needs order.
    function is placesed in stack when it called.

    caution.
    recursive functions are require end point. = base case. then stops.
    different input. obvious.
*/

//basic recursion.

function countDown(num){
    if(num <= 0){
        console.log("All done!");
        return;
    }
    console.log(num);
    num--;
    countDown(num);
}

/*
it usually made by iterate.

function countDown(num){
    for(var i = num; i > 0; i--){
        console.log(i);
    }
    console.log("All done!");
}

*/


countDown(5);


//second recursive function 

function sumRange(num){
    if(num === 1) return 1;
    return num + sumRange(num-1);
}

// sumRange(3)
//     return 3 + sumRange(2)
//                 return 2 + sumRange(1)
//                             return 1
// return 6 = 3 + 2 + 1
sumRange(3);


//Factorial!

// function factorial(num){
//     let total = 1;
//     for(let i = num; i > 1; i--){
//         total *=i;
//     }
//     return total;
// }

//recursively.

function factorial(num){
    if(num === 1) return 1;
    return num * factorial(num-1);
}

factorial(5);

/* where things go wrong.
    No base case.
    forgetting to return or returning the wrong thing!
*/
