/*
    This pattern involves dividing a data set into smaller chunks and then 
    repeating a process with a subset of data.

    This pattern can tremendously decrease time complexity
*/

/*
    An Example

    Given a sorted array of integers, write a function called
    search, that accepts a value and returns the index where
    the value passed to the function is lpcated. 
    If the value is not found, return -1


*/
search([1,2,3,4,5,6],4) //3
search([1,2,3,4,5,6],6) //5
search([1,2,3,4,5,6],11) //-1

//linear search O(N)
function search(arr, val){
    for(let i = 0; i < arr.length; i++){
        if(arr[i] === val){
            return i;
        }
    }
    return -1;
}
//refactor binary search O(logN)
function search(array, val){
    let min = 0;
    let max = array.length -1;

    while(min <= max){
        let middle = Math.floor((min+max)/2);
        let currentElement = array[middle];
        if(array[middle] < val){
            min = middel + 1;
        }else if (array[middle] > val){
            max = midle -1;
        }else {
            return middle;
        }
    }
    return -1;
}

//averagePair 솔루션
function averagePair(arr, num){
  let start = 0
  let end = arr.length-1;
  while(start < end){
    let avg = (arr[start]+arr[end]) / 2 
    if(avg === num) return true;
    else if(avg < num) start++
    else end--
  }
  return false;
}
//isSubsequence 솔루션 - 반복
function isSubsequence(str1, str2) {
  var i = 0;
  var j = 0;
  if (!str1) return true;
  while (j < str2.length) {
    if (str2[j] === str1[i]) i++;
    if (i === str1.length) return true;
    j++;
  }
  return false;
}
isSubsequence 솔루션 – O(1) 공간이 아닌 재귀
function isSubsequence(str1, str2) {
  if(str1.length === 0) return true
  if(str2.length === 0) return false
  if(str2[0] === str1[0]) return isSubsequence(str1.slice(1), str2.slice(1))  
  return isSubsequence(str1, str2.slice(1))
}
