/*
    기수 정렬

    radix sort is a special sorting algorithm 
    that works on lists of number.
    
    it never makes comparisons between elements.

    it exploits the fact that information about the size of a number is encoded in the number of digits.

    more digits means a bigger number!

    -> 자리수가 많은 수가 자리수가 적은 수보다 무조건 적다는 것을 알지 않은가? 

    how does it work?

    0부터 9 까지 버킷을 만든다.
    마지막 자리부터 맞춰서 넣는다.

    cf.정수 정렬인 경우만 가능하다.


    Radix sort helpers.

    in order to implement radix sort, it's helpful
    to build a few helper functions first:

    getDigit(num, place) - returns the digit in num at the given place value.

    digitCount(num) - returns the number of digits in num

    mostDigits(nums) - Given an array of numbers, returns the number of digits in the largest numbers in the list.
    
    
*/

function getDigit(num, i){
    return Math.floor(Math.abs(num) / Math.pow(10,i)) % 10;
}
//100의 자리로 나눈다음 소수점을 없애도록 내림하고, 10으로 나눈뒤에 나머지를 구하면 해당 자리수가 구해진다.
//여기서abs는 absolute number. 즉 절대값이다.

function digitCount(num){
    if (num === 0) return 1;
    return Math.floor(Math.log10(Math.abs(num))) +1;
}
//밑이 10인 로그.
//ex-> Math.log10(423) -> 2.6.... 10을 몇번을 곱해야 하나.
//Math.floor(2.6...) -> 2. 즉 2번은 곱해야 한다. 거기다가 + 1을 하면 자릿수가 된다.

//stack overflow에서 코드를 가져와서 자신의 기능에 붙이는 것은 완전 정상이다.


function mostDigits(nums){
    let maxDigits = 0;
    for(let i = 0; i < nums.length; i++){
        maxDigits = Math.max(maxDigits, digitCount(nums[i]));
    }
    return maxDigits;
}
/*
    pseudocode

    define a function that accepts list of numbers
    figure out how many digits the largest number has
    loop from k = 0 up to this largest number of digits
    for each iteration of the loop:
        create buckets for each digit (0 to 9)
        place each number in the corresponding bucket based on its kth digit
    replace our wxisting array with value in our buckets, starting with 0 and going up to 9
    return list at the end!
    
*/

function radixSort(nums){
    let maxDigitCount = mostDigits(nums);
    for (let k = 0; k< maxDigitCount; k++){
        let digitBuckets = Array.from({length:10}, () => []);
        for(let i = 0; i < nums.length; i++){
            let digit = getDigit(nums[i],k);
            digitBuckets[digit].push(nums[i]);
            
        }
//        console.log(digitBuckets);

        nums= [].concat(...digitBuckets);
        //... 전개 연산자. 모든 인수나 자릿수 버킷의 모든 요소를 개별 인수로 넣을 수 있게 해준다.
        // ex) [].concat([[1],[2],[3]]); // [[1],[2],[3]]
        //-> [].concat(...[[1],[2],[3]]); // [1,2,3]
//        console.log(digitBuckets);
    
    
    }
    return nums;
}
radixSort([23,345,5467,12,2345,9852])


/*
n = 정렬 항목 또는 정수의 수 length of array
k = 정수의 기리. = 자리수. number of digits.

timecomplexity(best) : O(nk)
timecomplexity(average) : O(nk)
timecomplexity(worst) : O(nk)
spaceComplexity : O(n + k)

*/
