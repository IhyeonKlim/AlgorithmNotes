/*
    Doubly Linked Lists.

    compare with singly linke list.
    difference is prev.
    common is next.

    that's why it called doubly.
    
    but more memory === more flexiblility.
    
    it's almost always a tradeoff.

Node
-val
-next
-prev

doublyLinkedList
-head
-tail
-length
push. 끝에 추가
pop. 끝에 제거
shift. 앞에 제거
unshift. 앞에 추가
insert. 중간에 추가
remove. 중간에 제거
get. index로 return value.
set. 
*/

class Node{
    constructor(val){
        this.val = val;
        this.next = null;
        this.prev = null;
    }
}

// class doublyLinkedList{
//     constructor(){
//         this.head = null;
//         this.tail = null;
//         this.length = 0;
//     }
//     push(val){
//         var newNode = new Node(val);
//         if(this.length ===0){
//             this.head = newNode;
//             this.tail = newNode;
//         }else{
//             this.tail.next = newNode;
//             newNode.prev = this.tail;
//             this.tail = newNode;
//         }
//         this.length++;
//         return this
//     }
// }

/*
    pusing pseudocode.

    create a new node with the value passed to the function 
    if the head property is null set the head and tail to be the newly created node
    if not, set the next property on the tail to be that node
    set the previous property on the newly created node to be the tail
    set the tail to be the newly created node
    increment the length
    return the doubly linked list

    poping pseudocode

    if there is no head, return undefined
    store the current tail in a variable to return later
    if the length is 1, set the head and tail to be null
    update the tail to be the previous node.
    set the newTail's next to null
    decrement the length
    return the value removed
    
*/

// class doublyLinkedList{
//     constructor(){
//         this.head = null;
//         this.tail = null;
//         this.length = 0;
//     }
//      pop(){
//          if(!this.head) return undefined;
//          var poppedNode = this.tail;
//          if(this.length === 1){
//              this.head = null;
//              this.tail = null;
//          }else{
//              this.tail = poppedNode.prev;
//              this.tail.next = null;
//              poppedNode.prev = null;
//          }
//          this.length--;
//          return poppedNode;
//      }
// }

/*

    
    shifting pseudocode

    if length is 0, return undefined
    store the current head property in a variable (we'll call it old haed)
    if the legnth is one
        set the head to be null
        set the tail to be null
    update the head to be the next of the old head
    set the head's prev property to null
    set the old head's next to null
    decrement the length 
    return old head
    
*/

// class doublyLinkedList{
//     constructor(){
//         this.head = null;
//         this.tail = null;
//         this.length = 0;
//     }
//      shift(){
//          if(this.length === 0)return undefined;
//          var oldHead = this.head;
//          if(this.length ===1){
//              this.head = null;
//              this.tail = null;
//          }else{
//              this.head = oldHead.next;
//              this.head.prev = null;
//              oldHead.next = null;             
//          }
//          this.length--;
//          return oldHead;
//      }
// }

/*
    unshift pseudocode
    
    create a new node with the value passed to the function 
    if the length is 0
        set the head to be the new node
        set the tail to be the new node
    otherwise
        set the prev property on the head of the list to be the new node
        set the next property on the new node to be the head property
        update the head to be the new node
    increment the length
    return the list


*/

class doublyLinkedList{
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    push(val){
        var newNode = new Node(val);
        if(this.length ===0){
            this.head = newNode;
            this.tail = newNode;
        }else{
            this.tail.next = newNode;
            newNode.prev = this.tail;
            this.tail = newNode;
        }
        this.length++;
        return this
    }
    unshift(val){
        var newNode = new Node(val);
        if(this.length ===0){
            this.head = newNode;
            this.tail = newNode;
        }else{
            this.head.prev = newNode;
            newNode.next = this.head;
            this.head = newNode;
        }
        this.length++;
        return this;
    }
    get(index){
        if(index < 0 || index >= this.length)return null;
        //working from start.
        if(index <= this.length/2){
            var count = 0;
            var current = this.head;
            while(count != index){
                current = current.next;
                count++;
            }           
        } else{
            //working from end.
            var count = this.length -1;
            var current = this.tail;
            while(count !== index){
                current = current.prev;
                count--;
            }
        }
        return current
    }
    set(index, val){
        var foundNode = this.get(index);
        if(foundNode != null){
            foundNode.val = val;
            return true;
        }
        return false;
    }
    insert(index, val){
        if(index < 0 || index > this.length) return false;
        if(index === 0) return !!this.unshift(val);
        if(index === this.length) return !!this.push(val);
        
        var newNode = new Node(val);
        var beforeNode = this.get(index-1);
        var afterNode = beforeNode.next;
        
        beforeNode.next = newNode, newNode.prev = beforeNode;
        newNode.next = afterNode, afterNode.prev = newNode;
        this.length++;
        return true;
    }
    remove(index){
        if(index < 0 || index > this.length) return false;
        if(index === 0)return this.shift();
        if(index === this.length-1) return this.pop();
        
        var removeNode = this.get(index);
        var beforeNode = removedNode.prev;
        var afterNode = removedNode.next;
        beforeNode.next = afterNode;
        afterNode.prev = beforeNode;
        // removedNode.prev.next = removedNode.next;
        // removedNode.next.prev = removedNode.prev;
        removedNode.next = null;
        removedNode.prev = null;
        this.length--;
        return removedNode;
    }
}

var list = new doublyLinkedList();
list.push("Harrry");
list.push("Ron");
list.push("Hermione");

list.unshift("Hagrid");

/*
    get pseudocode
    
    if the index is less than 0 or greater or equal to the length, return null
    if the index is less than or equal to half the length of the list
        loop through the list starting from the head and loop towards the middle
        return the node once it is found
    if the index is greater than half the length of the list
        loop through the list starting from the tail and loop towards the middle
        return the node once it is found.

    set pseudocode

    create a variable which is the result of the get method at the index passed to the function
        if the get method returns a valid node, set the value of that node to be the value passed to the function
        return true

    insert pseudocode

    if the index is less than zero or greater than or equal to the length return false;
    if the index is 0, unshift
    if the index is the same as the length, push
    use the get method to access the index -1
    set the next and prev peoperties on the correct nodes to link everthing together
    increment the length
    return true

    remove pseudocode
    if the index is less than zero or greater than or equal to the length return undefined
    if the index is 0, shift
    if the index is the same as the length -1, pop
    Use the get method to retrieve the item to be removed
    Update the next and prev properties to remove the found node from the list.
    Set next and prev to null on the found node
    Decrement the length
    Return the removed node.


    Big O of doubly Linked lists.
    insertion : O(1)
    removal : O(1)
    searching : O(N)
    Access : O(N)

    Recap

    doubly linked lists are almosdt indedtical to singly linked lists except there is an additional pointer to previous nodes
    better than singly linked lists for finding nodes and can be done in half the time!
    however they do take up more memory considering the extra pointer.

    */
