#단속용 카메라를 한번은 만나도록 카메라 설치.
#차량 경로 routes가 매개변수. 최소 몇대 카메라 설치 return

#차량은 1대 이상 10000대 이하

#routes에는 차량 이동 경로 포함 routes[i][0]에는 i번째 차량이 고속도로에 진입한 지점
#routes[i][1]에는 i번째 차량이 고속도로에서 나간지점.
#차량 진출입 시점에 카메라가 있어도 만난것으로 간주.
#진입지점, 진출 지점은 -30000이상 30000이하

#무슨말 하는지 전혀 모르겠다.

#고속도로가 1차원의 수직선 좌표라고 생각했어야 했다.

#그리디 알고리즘(Greedy Algorithm)
선택의 순간마다 당장 눈앞에 보이는 최고의 상황만을 쫓아 최종적인 해답에 도달하는 방법

[2,3,7,1,2,1,5]

#일렬로 놓여있는 숫자카드를 왼쪽 맨끝과 오른쪽 맨 끝 두 카드중 
#하나를 가져하는 방식으로 4개의 카드를 가져갔을 때 가져간 카드의 합의 최대값은?

#2+3+7+5 = 17이 답이다. -> 이런느낌이라고 하고 이건 그리드는 아니다.

#그리드는 증명을 해야한다.
#증명하지 말고 반례를 찾아봐라. 증명하려들면 논문써야한다.

   #엣지케이스를 찾아라.
    #1, 30, 5, 4, 7, 6 3장 픽할때 방금전과 똑같이 가져가면 6+7+4만 고른다. 

    #정렬을 해야한다
    #[[-20,-15], [-18,-13],[-14,-5],[-5,-3]] routes
    #나가는 지점으로 정렬해봐라. 그림으로 친다면 이런느낌이다.
#    -20________-15.
#        -18 ___________-13
#                   -14______-5.
#                            -5___-3
# point가 -15. -5. 2곳 그래서 result가 2다.

#그리디는 정렬을 해야한다.

    def solution(routes):
        answer = 0
        routes.sort(key = lamda x:x[1]) #????????
        point = routes[0][1] #첫번째 차량이 있다면 제일 큰 수에서 출발, 그다음 작은수다. 이 경우 -15는 무조건 포인트가 된다.
        #그래tj answer = 1로 증가해야한다.
            for i in range(1, len(routes)):
                #두번째 차량의 진입지점이 point보다 작으면 설치해라.
                if routes[i][0] > point:
                    point = routes[i][1]
                    answer +=1
        #정렬하고 최적으로 실행했을 때. 그걸 포인트 잡고 움직이는게 그리드다.
    return answer

#?????????
